// <auto-generated />
using System;
using DM.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DM.DAL.Migrations
{
    [DbContext(typeof(DmDbContext))]
    partial class DmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DM.DAL.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<long>("RecordId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("DM.DAL.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Object")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("DM.DAL.Entities.Field", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("RecordId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TemplateId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Field");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(3789),
                            Data = "Editable description",
                            IsMandatory = true,
                            Name = "Description",
                            RecordId = 1L,
                            Type = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(4165),
                            Data = "Editable Employee",
                            IsMandatory = true,
                            Name = "Employee",
                            RecordId = 2L,
                            Type = 1
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(4184),
                            Data = "Editable description",
                            IsMandatory = true,
                            Name = "Description",
                            TemplateId = 1L,
                            Type = 1
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(4501),
                            Data = "Editable Estimate",
                            IsMandatory = true,
                            Name = "Estimate",
                            TemplateId = 2L,
                            Type = 1
                        });
                });

            modelBuilder.Entity("DM.DAL.Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("DM.DAL.Entities.List", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<long?>("ListFieldId")
                        .HasColumnType("bigint");

                    b.Property<long>("ListId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ListFieldId");

                    b.ToTable("List");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 670, DateTimeKind.Local).AddTicks(9816),
                            Data = "Start",
                            ListId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(154),
                            Data = "InProgress",
                            ListId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(173),
                            Data = "Ready",
                            ListId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(187),
                            Data = "Development",
                            ListId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(199),
                            Data = "Testing",
                            ListId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(215),
                            Data = "Building",
                            ListId = 2L
                        });
                });

            modelBuilder.Entity("DM.DAL.Entities.ListField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("RecordId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TemplateId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ListField");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 670, DateTimeKind.Local).AddTicks(8611),
                            IsMandatory = true,
                            Name = "Status",
                            TemplateId = 1L,
                            Type = 2
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 670, DateTimeKind.Local).AddTicks(9023),
                            IsMandatory = false,
                            Name = "Type",
                            RecordId = 1L,
                            Type = 2
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 670, DateTimeKind.Local).AddTicks(9356),
                            IsMandatory = false,
                            Name = "Type",
                            RecordId = 2L,
                            Type = 2
                        });
                });

            modelBuilder.Entity("DM.DAL.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Inn")
                        .HasColumnType("text");

                    b.Property<string>("Kpp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Ogrn")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "Organization_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Inn" }, "Organization_Inn")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "Organization_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "Ogrn" }, "Organization_Ogrn")
                        .IsUnique();

                    b.ToTable("Organization");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Kazan",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "qwerty@mail.ru",
                            Inn = "12345678",
                            Kpp = "123456",
                            Name = "Brio Mrs",
                            Ogrn = "87654321",
                            Phone = "890121212"
                        });
                });

            modelBuilder.Entity("DM.DAL.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Create")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<bool>("Update")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Create = true,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(1760),
                            Delete = true,
                            Read = true,
                            RoleId = 1L,
                            Type = 1,
                            Update = true
                        },
                        new
                        {
                            Id = 7L,
                            Create = true,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(1883),
                            Delete = true,
                            Read = true,
                            RoleId = 1L,
                            Type = 6,
                            Update = true
                        },
                        new
                        {
                            Id = 2L,
                            Create = true,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(1901),
                            Delete = false,
                            Read = true,
                            RoleId = 1L,
                            Type = 1,
                            Update = true
                        },
                        new
                        {
                            Id = 3L,
                            Create = true,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(1914),
                            Delete = false,
                            Read = true,
                            RoleId = 2L,
                            Type = 1,
                            Update = true
                        },
                        new
                        {
                            Id = 4L,
                            Create = true,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(1927),
                            Delete = true,
                            Read = true,
                            RoleId = 2L,
                            Type = 1,
                            Update = true
                        },
                        new
                        {
                            Id = 5L,
                            Create = true,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(1943),
                            Delete = true,
                            Read = true,
                            RoleId = 1L,
                            Type = 3,
                            Update = true
                        },
                        new
                        {
                            Id = 6L,
                            Create = true,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(1955),
                            Delete = true,
                            Read = true,
                            RoleId = 1L,
                            Type = 4,
                            Update = true
                        },
                        new
                        {
                            Id = 8L,
                            Create = true,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(1968),
                            Delete = true,
                            Read = true,
                            RoleId = 1L,
                            Type = 5,
                            Update = true
                        });
                });

            modelBuilder.Entity("DM.DAL.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsInArchive")
                        .HasColumnType("boolean");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 669, DateTimeKind.Local).AddTicks(6929),
                            IsInArchive = false,
                            OrganizationId = 1L,
                            Title = "Project-1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 670, DateTimeKind.Local).AddTicks(5625),
                            IsInArchive = false,
                            OrganizationId = 1L,
                            Title = "Project-2"
                        });
                });

            modelBuilder.Entity("DM.DAL.Entities.Record", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Executor")
                        .HasColumnType("text");

                    b.Property<DateTime>("FixDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsInArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("TemplateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Record");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 670, DateTimeKind.Local).AddTicks(6662),
                            FixDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInArchive = false,
                            Name = "Rec-1",
                            Priority = 0,
                            ProjectId = 1L,
                            Status = 0
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 670, DateTimeKind.Local).AddTicks(6796),
                            FixDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInArchive = false,
                            Name = "Rec-2",
                            Priority = 0,
                            ProjectId = 1L,
                            Status = 0
                        });
                });

            modelBuilder.Entity("DM.DAL.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Team Supervisor"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Supervisor"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Worker"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DM.DAL.Entities.Template", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Template");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 670, DateTimeKind.Local).AddTicks(7608),
                            Name = "Templ-1",
                            ProjectId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 670, DateTimeKind.Local).AddTicks(7743),
                            Name = "Templ-2",
                            ProjectId = 1L
                        });
                });

            modelBuilder.Entity("DM.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FathersName")
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "User_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Login" }, "User_Login")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "string@gamil.com",
                            FathersName = "admin",
                            HashedPassword = "AON0utalfV1jyo5nJPnooXEc5NjOWuFBpohmk6xYZ8eK0fjDbSLBGPrY5YkGYlEhBA==",
                            LastName = "admin",
                            Login = "string",
                            Name = "admin",
                            OrganizationId = 1L,
                            Position = "Super Administrator Senior",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "string@mail.ru",
                            FathersName = "test",
                            HashedPassword = "APqcPGe7Q3u2jRDNgHuKrck8E9l1SAEj6knGQqAAZAm3gIoi/E4FJN4lKqEAUwhMLw==",
                            LastName = "Bot",
                            Login = "string1",
                            Name = "TestBot",
                            OrganizationId = 1L,
                            Position = "Team Supervisor Junior",
                            RoleId = 2L
                        });
                });

            modelBuilder.Entity("DM.DAL.Entities.UserProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProject");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 5, 5, 9, 23, 59, 671, DateTimeKind.Local).AddTicks(2665),
                            ProjectId = 1L,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("DM.DAL.Entities.Comment", b =>
                {
                    b.HasOne("DM.DAL.Entities.Record", "Record")
                        .WithMany("Comments")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DM.DAL.Entities.Field", b =>
                {
                    b.HasOne("DM.DAL.Entities.Record", "Record")
                        .WithMany("Fields")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DM.DAL.Entities.Template", "Template")
                        .WithMany("Fields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Record");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DM.DAL.Entities.Item", b =>
                {
                    b.HasOne("DM.DAL.Entities.Project", "Project")
                        .WithMany("Items")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DM.DAL.Entities.List", b =>
                {
                    b.HasOne("DM.DAL.Entities.ListField", "ListField")
                        .WithMany("Lists")
                        .HasForeignKey("ListFieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ListField");
                });

            modelBuilder.Entity("DM.DAL.Entities.ListField", b =>
                {
                    b.HasOne("DM.DAL.Entities.Record", "Record")
                        .WithMany("ListFields")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DM.DAL.Entities.Template", "Template")
                        .WithMany("ListFields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Record");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DM.DAL.Entities.Permission", b =>
                {
                    b.HasOne("DM.DAL.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DM.DAL.Entities.Project", b =>
                {
                    b.HasOne("DM.DAL.Entities.Organization", "Organization")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DM.DAL.Entities.Record", b =>
                {
                    b.HasOne("DM.DAL.Entities.Project", "Project")
                        .WithMany("Records")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.DAL.Entities.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Project");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DM.DAL.Entities.Template", b =>
                {
                    b.HasOne("DM.DAL.Entities.Project", "Project")
                        .WithMany("Templates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DM.DAL.Entities.User", b =>
                {
                    b.HasOne("DM.DAL.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.DAL.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DM.DAL.Entities.UserProject", b =>
                {
                    b.HasOne("DM.DAL.Entities.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.DAL.Entities.User", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DM.DAL.Entities.ListField", b =>
                {
                    b.Navigation("Lists");
                });

            modelBuilder.Entity("DM.DAL.Entities.Organization", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DM.DAL.Entities.Project", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Records");

                    b.Navigation("Templates");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("DM.DAL.Entities.Record", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Fields");

                    b.Navigation("ListFields");
                });

            modelBuilder.Entity("DM.DAL.Entities.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("DM.DAL.Entities.Template", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("ListFields");
                });

            modelBuilder.Entity("DM.DAL.Entities.User", b =>
                {
                    b.Navigation("UserProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
